- name: deploy-GoFNOL-[ENV]-blue
  plan:
  - get: GoFNOL-image
    passed:
    - build-GoFNOL
  - get: GoFNOL-artifactory
    trigger: true
    passed:
      - build-GoFNOL
  - task: prepare-manifest
    config:
      platform: linux
      inputs:
      - name: GoFNOL-artifactory
      outputs:
      - name: deployables
      run:
        path: bash
        args:
        - -exc
        - |
          zip_file=GoFNOL-*.zip
          unzip ./GoFNOL-artifactory/${zip_file} -d ./deployables
          sed -i -e "s/\[HOST_NAME\]/gofnol-[ENV]-blue/" ./deployables/manifest.yml
  - put: GoFNOL-cf-[ENV]
    params:
      manifest: deployables/manifest.yml
      path: deployables/app

- name: test-GoFNOL-[ENV]
  plan:
  - get: GoFNOL-image
    passed:
    - deploy-GoFNOL-[ENV]-blue
  - get: GoFNOL-cf-[ENV]
    passed:
    - deploy-GoFNOL-[ENV]-blue
    trigger: true
  - task: do-the-magic
    params:
      <<: *GoFNOL-cf-[ENV]-source
    config:
      platform: linux
      run:
        path: bash
        args:
        - -ec
        - |
          app_name=GoFNOL-blue
          cf login -a ${api} -u ${username} -p ${password} -o "${organization}" -s "${space}"
          set -x
          app_url=$(cf app $app_name | grep routes | sed -e 's/routes:\s*/https:\/\//')

          #visit home page
          response=$(curl -I $app_url)

          #verify auth redirect occurred
          response_status=$(echo "$response" | grep HTTP/1.1 | tr -d '\r\n')
          if [ "$response_status" != "HTTP/1.1 302 Found" ]
          then
            echo "App did not respond with redirect as expected"
            exit 1
          fi

          #get IS endpoint from cf
          cf_env_vars=$(cf env $app_name)
          set +x
          vcap_start=$(echo "$cf_env_vars" | grep -m 1 -n '^{' | cut -f1 -d:)
          vcap_end=$(echo "$cf_env_vars" | grep -m 1 -n '^}' | cut -f1 -d:)
          vcap=$(echo "$cf_env_vars" | tail -n+${vcap_start} | head -n$(($vcap_end - $vcap_start + 1)))
          expected_redirect_url=$(echo "$vcap" | jq -r '.["VCAP_SERVICES"]["user-provided"] | .[] | select(.["name"] | startswith("IS")) | .["credentials"]["endpoint"]')
          set -x

          #verify auth redirect location
          location_path=$(echo "$response" | grep Location: | sed -e 's/Location: //' | sed -e 's/\?.*//')
          if [ "$location_path" != "${expected_redirect_url}/connect/authorize" ]
          then
            echo "App did not respond with correct redirect as expected"
            exit 1
          fi

- name: greenify-GoFNOL-[ENV]
  plan:
  - get: GoFNOL-image
    passed:
    - test-GoFNOL-[ENV]
  - get: GoFNOL-cf-[ENV]
    passed:
    - test-GoFNOL-[ENV]
    trigger: true
  - task: transition-blue-to-green
    params:
      <<: *GoFNOL-cf-[ENV]-source
    config:
      platform: linux
      run:
        path: bash
        args:
        - -exc
        - |
          cf login -a ${api} -u ${username} -p ${password} -o "${organization}" -s "${space}"
          cf map-route GoFNOL-blue apps-dev.gp2.axadmin.net --hostname gofnol-[ENV]
          cf delete GoFNOL -f || true
          cf unmap-route GoFNOL-blue apps-dev.gp2.axadmin.net --hostname gofnol-[ENV]-blue
          cf rename GoFNOL-blue GoFNOL